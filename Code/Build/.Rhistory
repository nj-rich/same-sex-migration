knitr::opts_chunk$set(echo = TRUE)
gc()
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
library(haven) #for stata data export/import
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names()
colnames(pop_support)
?rename
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names() %>%
select(v16012, v163001a, v162103) %>%
rename(sweight = v16012, fipstate = v163001a, lgbt_support = v162103)
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names() %>%
select(v160102, v163001a, v162103) %>%
rename(sweight = v160102, fipstate = v163001a, lgbt_support = v162103)
gc()
working_df <- as_survey(pop_support, weights = sweight)
gc()
working_df <- working_df %>%
group_by(fipstate) %>%
summarize(mean_support = survey_mean(lgbt_support, na.rm = T)) %>% #treat like continuous variable - rank 1-100 so feel ok with this
ungroup()
View(working_df)
max(pop_support$lgbt_support)
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names() %>%
select(v160102, v163001a, v162103) %>%
rename(sweight = v160102, fipstate = v163001a, lgbt_support = v162103) %>% #note: I use FIP codes for IPUMS so carries over
filter(lgbt_support != -9 && lgbt_support != -7 && lgbt_support != -6 && lgbt_support != 998 && lgbt_support != 999)
str(pop_support)
class(pop_support$lgbt_support)
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names() %>%
select(v160102, v163001a, v162103) %>%
rename(sweight = v160102, fipstate = v163001a, lgbt_support = v162103) %>% #note: I use FIP codes for IPUMS so carries over
filter(lgbt_support != -9 & lgbt_support != -7 & lgbt_support != -6 & lgbt_support != 998 & lgbt_support != 999)
gc()
working_df <- working_df %>%
group_by(fipstate) %>%
summarize(mean_support = survey_mean(lgbt_support, na.rm = T)) %>% #treat like continuous variable - rank 1-100 so feel ok with this
ungroup()
gc()
working_df <- as_survey(pop_support, weights = sweight) #note: probability weights like IPUMS, so use same function (see documentation)
gc()
working_df <- working_df %>%
group_by(fipstate) %>%
summarize(mean_support = survey_mean(lgbt_support, na.rm = T)) %>% #treat like continuous variable - rank 1-100 so feel ok with this
ungroup()
#issue: state 28 has mean over 128 should not be possible
View(working_df)
gc()
#add in state-based labels (for both ex-ante and ex-post states)
state_labels <- function(df) {
df <- df %>%
mutate(state = as.character(state_fip))
df <- df %>%
mutate(state = case_when(
state == "1" ~ "AL",
state == "2" ~ "AK",
state == "4" ~ "AZ",
state == "5" ~ "AR",
state == "6" ~ "CA",
state == "8" ~ "CO",
state == "9" ~ "CT",
state == "10" ~ "DE",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "11" ~ "DC",
state == "12" ~ "FL",
state == "13" ~ "GA",
state == "15" ~ "HI",
state == "16" ~ "ID",
state == "17" ~ "IL",
state == "18" ~ "IN",
state == "19" ~ "IA",
state == "20" ~ "KS",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "21" ~ "KY",
state == "22" ~ "LA",
state == "23" ~ "MI",
state == "24" ~ "MD",
state == "25" ~ "MA",
state == "26" ~ "ME",
state == "27" ~ "MN",
state == "28" ~ "MS",
state == "29" ~ "MO",
state == "30" ~ "MT",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "31" ~ "NE",
state == "32" ~ "NV",
state == "33" ~ "NH",
state == "34" ~ "NJ",
state == "35" ~ "NM",
state == "36" ~ "NY",
state == "37" ~ "NC",
state == "38" ~ "ND",
state == "39" ~ "OH",
state == "40" ~ "OK",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "41" ~ "OR",
state == "42" ~ "PA",
state == "44" ~ "RI",
state == "45" ~ "SC",
state == "46" ~ "SD",
state == "47" ~ "TN",
state == "48" ~ "TX",
state == "49" ~ "UT",
state == "50" ~ "VT",
state == "51" ~ "VA",
state == "53" ~ "WA",
state == "54" ~ "WV",
state == "55" ~ "WI",
state == "56" ~ "WY",
state == "72" ~ "PR",
state == "97" ~ "OMI", #Overseas Military Installations
state == "99" ~ NA,
TRUE ~ state
))
}
state_support_2016 <- state_labels(working_df)
gc()
#add in state-based labels (for both ex-ante and ex-post states)
state_labels <- function(df) {
df <- df %>%
mutate(state = as.character(fipstate))
df <- df %>%
mutate(state = case_when(
state == "1" ~ "AL",
state == "2" ~ "AK",
state == "4" ~ "AZ",
state == "5" ~ "AR",
state == "6" ~ "CA",
state == "8" ~ "CO",
state == "9" ~ "CT",
state == "10" ~ "DE",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "11" ~ "DC",
state == "12" ~ "FL",
state == "13" ~ "GA",
state == "15" ~ "HI",
state == "16" ~ "ID",
state == "17" ~ "IL",
state == "18" ~ "IN",
state == "19" ~ "IA",
state == "20" ~ "KS",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "21" ~ "KY",
state == "22" ~ "LA",
state == "23" ~ "MI",
state == "24" ~ "MD",
state == "25" ~ "MA",
state == "26" ~ "ME",
state == "27" ~ "MN",
state == "28" ~ "MS",
state == "29" ~ "MO",
state == "30" ~ "MT",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "31" ~ "NE",
state == "32" ~ "NV",
state == "33" ~ "NH",
state == "34" ~ "NJ",
state == "35" ~ "NM",
state == "36" ~ "NY",
state == "37" ~ "NC",
state == "38" ~ "ND",
state == "39" ~ "OH",
state == "40" ~ "OK",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "41" ~ "OR",
state == "42" ~ "PA",
state == "44" ~ "RI",
state == "45" ~ "SC",
state == "46" ~ "SD",
state == "47" ~ "TN",
state == "48" ~ "TX",
state == "49" ~ "UT",
state == "50" ~ "VT",
state == "51" ~ "VA",
state == "53" ~ "WA",
state == "54" ~ "WV",
state == "55" ~ "WI",
state == "56" ~ "WY",
state == "72" ~ "PR",
state == "97" ~ "OMI", #Overseas Military Installations
state == "99" ~ NA,
TRUE ~ state
))
}
state_support_2016 <- state_labels(working_df)
#note:
#only 2016
#think about if want to invert
View(state_support_2016)
state_support_2016 <- state_labels(working_df) %>%
select(mean_support, state)
View(state_support_2016)

library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("janitor")
library(haven) #for stata data export/import
gc()
#windows
pop_support <- read_dta("C:\\Users\\njrich\\Downloads\\anes_timeseries_2016.dta") %>%
clean_names() %>%
select(v160102, v163001a, v162103) %>%
rename(sweight = v160102, fipstate = v163001a, lgbt_support = v162103) %>% #note: I use FIP codes for IPUMS so carries over
filter(lgbt_support != -9 & lgbt_support != -7 & lgbt_support != -6 & lgbt_support != 998 & lgbt_support != 999) #watch survey issues
base_df <- read_dta("C:\\Users\\njrich\\Downloads\\base_df.dta") %>%
mutate(across(where(is.labelled), ~ as.character(as_factor(.)))) #get state names as characters
gc()
working_df <- as_survey(pop_support, weights = sweight) #note: probability weights like IPUMS, so use same function (see documentation)
gc()
working_df <- working_df %>%
group_by(fipstate) %>%
summarize(mean_support = survey_mean(lgbt_support, na.rm = T)) %>% #treat like continuous variable - rank 1-100 so feel ok with this
ungroup()
#issue: state 28 has mean over 128 should not be possible
gc()
#add in state-based labels (for both ex-ante and ex-post states)
state_labels <- function(df) {
df <- df %>%
mutate(state = as.character(fipstate))
df <- df %>%
mutate(state = case_when(
state == "1" ~ "AL",
state == "2" ~ "AK",
state == "4" ~ "AZ",
state == "5" ~ "AR",
state == "6" ~ "CA",
state == "8" ~ "CO",
state == "9" ~ "CT",
state == "10" ~ "DE",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "11" ~ "DC",
state == "12" ~ "FL",
state == "13" ~ "GA",
state == "15" ~ "HI",
state == "16" ~ "ID",
state == "17" ~ "IL",
state == "18" ~ "IN",
state == "19" ~ "IA",
state == "20" ~ "KS",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "21" ~ "KY",
state == "22" ~ "LA",
state == "23" ~ "ME",
state == "24" ~ "MD",
state == "25" ~ "MA",
state == "26" ~ "MI",
state == "27" ~ "MN",
state == "28" ~ "MS",
state == "29" ~ "MO",
state == "30" ~ "MT",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "31" ~ "NE",
state == "32" ~ "NV",
state == "33" ~ "NH",
state == "34" ~ "NJ",
state == "35" ~ "NM",
state == "36" ~ "NY",
state == "37" ~ "NC",
state == "38" ~ "ND",
state == "39" ~ "OH",
state == "40" ~ "OK",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "41" ~ "OR",
state == "42" ~ "PA",
state == "44" ~ "RI",
state == "45" ~ "SC",
state == "46" ~ "SD",
state == "47" ~ "TN",
state == "48" ~ "TX",
state == "49" ~ "UT",
state == "50" ~ "VT",
state == "51" ~ "VA",
state == "53" ~ "WA",
state == "54" ~ "WV",
state == "55" ~ "WI",
state == "56" ~ "WY",
state == "72" ~ "PR",
state == "97" ~ "OMI", #Overseas Military Installations
state == "99" ~ NA,
TRUE ~ state
))
}
state_support_2016 <- state_labels(working_df) %>%
select(mean_support, state)
#note:
#only 2016
#think about if want to invert
combined_df <- base_df %>%
left_join(state_support_2016, by = join_by(expost_state == state)) %>% #update to join_by eventually
rename("expost_support" = mean_support) %>%
left_join(state_support_2016, by = join_by(exante_state == state)) %>%
rename("exante_support" = mean_support) %>%
mutate(across(where(is.character), ~ as_factor(.))) #convert back to factors to make STATA happy
#Export for STATA analysis
write_dta(combined_df, "C:\\Users\\njrich\\Downloads\\clean_dataframe.dta")
factor_levels(base_df$expost_region)
levels(base_df$expost_region)
colnames(base_df)
class(base_df$expost_region)
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
library(haven) #for stata data export/import
MA_pull <- fread("C:\\Users\\njrich\\Downloads\\MA_W25pull.csv") %>%
clean_names()
colnames(MA_pull)
class(MA_pull$statefip)
MA_pull <- fread("C:\\Users\\njrich\\Downloads\\MA_W25pull.csv") %>%
clean_names() %>%
filter(statefip == 25 | migplac1 == 25)
MA_working <- MA_pull
#overall function
add_context <- function(df_samesex) {
gc()
#add in state-based labels (for both ex-ante and ex-post states)
state_labels <- function(df, variable, label) {
df <- df %>%
mutate(state = as.character(variable))
df <- df %>%
mutate(state = case_when(
state == "1" ~ "AL",
state == "2" ~ "AK",
state == "4" ~ "AZ",
state == "5" ~ "AR",
state == "6" ~ "CA",
state == "8" ~ "CO",
state == "9" ~ "CT",
state == "10" ~ "DE",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "11" ~ "DC",
state == "12" ~ "FL",
state == "13" ~ "GA",
state == "15" ~ "HI",
state == "16" ~ "ID",
state == "17" ~ "IL",
state == "18" ~ "IN",
state == "19" ~ "IA",
state == "20" ~ "KS",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "21" ~ "KY",
state == "22" ~ "LA",
state == "23" ~ "ME",
state == "24" ~ "MD",
state == "25" ~ "MA",
state == "26" ~ "MI",
state == "27" ~ "MN",
state == "28" ~ "MS",
state == "29" ~ "MO",
state == "30" ~ "MT",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "31" ~ "NE",
state == "32" ~ "NV",
state == "33" ~ "NH",
state == "34" ~ "NJ",
state == "35" ~ "NM",
state == "36" ~ "NY",
state == "37" ~ "NC",
state == "38" ~ "ND",
state == "39" ~ "OH",
state == "40" ~ "OK",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "41" ~ "OR",
state == "42" ~ "PA",
state == "44" ~ "RI",
state == "45" ~ "SC",
state == "46" ~ "SD",
state == "47" ~ "TN",
state == "48" ~ "TX",
state == "49" ~ "UT",
state == "50" ~ "VT",
state == "51" ~ "VA",
state == "53" ~ "WA",
state == "54" ~ "WV",
state == "55" ~ "WI",
state == "56" ~ "WY",
state == "72" ~ "PR",
state == "97" ~ "OMI", #Overseas Military Installations
state == "99" ~ NA,
TRUE ~ state
))
#label legalization date from Gerstmann "2012" pqper
gc()
df <- df %>%
mutate(date_legalization = state)
df <- df %>%
mutate(date_legalization = case_when (
date_legalization == "AL" ~ "2015",
date_legalization == "AK" ~ "2014",
date_legalization == "AZ" ~ "2014",
date_legalization == "AR" ~ "2015",
date_legalization == "CA" ~ "2013", #watch legalized/repealed timeline
date_legalization == "CO" ~ "2014",
date_legalization == "CT" ~ "2008",
date_legalization == "DE" ~ "2013",
date_legalization == "DC" ~ "2009",
date_legalization == "FL" ~ "2015",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "GA" ~ "2015",
date_legalization == "HI" ~ "2013",
date_legalization == "ID" ~ "2014",
date_legalization == "IL" ~ "2013",
date_legalization == "IN" ~ "2014",
date_legalization == "IA" ~ "2009",
date_legalization == "KS" ~ "2014",
date_legalization == "KY" ~ "2015",
date_legalization == "LA" ~ "2015",
date_legalization == "ME" ~ "2012",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "MD" ~ "2012",
date_legalization == "MA" ~ "2003",
date_legalization == "MI" ~ "2015",
date_legalization == "MN" ~ "2013",
date_legalization == "MS" ~ "2015",
date_legalization == "MO" ~ "2015",
date_legalization == "MT" ~ "2014",
date_legalization == "NE" ~ "2015",
date_legalization == "NV" ~ "2014",
date_legalization == "NH" ~ "2009",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "NJ" ~ "2013",
date_legalization == "NM" ~ "2013",
date_legalization == "NY" ~ "2011",
date_legalization == "NC" ~ "2014",
date_legalization == "ND" ~ "2015",
date_legalization == "OH" ~ "2015",
date_legalization == "OK" ~ "2014",
date_legalization == "OR" ~ "2014",
date_legalization == "PA" ~ "2014",
date_legalization == "RI" ~ "2013",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "SC" ~ "2014",
date_legalization == "SD" ~ "2015",
date_legalization == "TN" ~ "2015",
date_legalization == "TX" ~ "2015",
date_legalization == "UT" ~ "2014",
date_legalization == "VT" ~ "2009",
date_legalization == "VA" ~ "2014",
date_legalization == "WA" ~ "2012",
date_legalization == "WV" ~ "2014",
date_legalization == "WI" ~ "2014",
date_legalization == "WY" ~ "2014",
date_legalization == "PR" ~ "2015",
date_legalization == "OMI" ~ "2015",
TRUE ~ date_legalization
))
gc()
df <- df %>%
mutate(date_legalization = as.numeric(date_legalization))
gc()
df <- df %>%
mutate(legal_state = ifelse(year >= date_legalization, 1, 0)) %>% #watch greater than/greater than or equal to
mutate(old_legal = ifelse(year < 2015, legal_state, if_else(date_legalization == 2015, 0, 1)))  %>% #track states as of 2014 not legal still even if become legal later- note dynamic before 2014 as states become legal, CHECK LOGIC
return(df)
}
#label ex-ante ex-post- make sure comprehensive with all variables created above
add_exantepost <- function(df, variable, label) {
if(label == "expost") {
df <- df %>%
rename(statefip = {{ variable }}, expost_state = state, expost_date_legalization = date_legalization, expost_legal_state = legal_state, expost_old_legal = old_legal) #hmm does this variable relabeling make sense need {{ variable }}?
}  else {
df <- df %>%
rename(paststate = {{ variable }}, exante_state = state, exante_date_legalization = date_legalization, exante_legal_state = legal_state, exante_old_legal = old_legal) #hmm does this variable relabeling make sense need {{ variable }}?
}
return(df)
}
#run state label and ex-ante ex-post labeling functions
add_state_labels <- function(df, variable, label) {
df <- df %>%
rename(variable = {{ variable }})
df <- state_labels(df, variable, label)
df <- add_exantepost(df, variable, label)
gc()
return(df)
}
#filter + add useful past_state variable
df_samesex <- df_samesex %>%
filter(statefip < 60) %>% #restrict to within 50 states
filter(migplac1 < 60) %>% #restrict to within 50 states
mutate(past_state = ifelse(migplac1 == 0, statefip, migplac1))
#RUN TWO MAJOR FUNCTIONS
#ex-post (ie look at legal status of state moved to)
df_samesex <- add_state_labels(df_samesex, statefip, "expost")
#ex-ante (ie look at legal status of state moved from)
df_samesex <- add_state_labels(df_samesex, past_state, "exante")
#add output labels incl. for heterogeneity tests
df_samesex <-df_samesex %>%
mutate(migrant = ifelse(migplac1 == 0, 0, 1)) %>% #think if can use logic statement/past_state var
mutate(localtofed_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 0, 0, ifelse(expost_old_legal == 0, 1, 0)))) %>% #note: indpt. expost/exante analysis
mutate(localtolocal_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 0, 0, ifelse(expost_old_legal == 1, 1, 0)))) %>%
mutate(fedtofed_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 1, 0, ifelse(expost_old_legal == 0, 1, 0)))) %>%
mutate(fedtolocal_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 1, 0, ifelse(expost_old_legal == 1, 1, 0)))) %>%
mutate(tofed_migrant = ifelse(migrant == 0, 0, ifelse(expost_old_legal == 0, 1, 0))) %>%
mutate(tolocal_migrant = ifelse(migrant == 0, 0, ifelse(expost_old_legal == 0, 0, 1))) %>% #for purposes of ex-ante regression breakdown, this is most useful
mutate(fromfed_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 0, 1, 0))) %>%
mutate(fromlocal_migrant = ifelse(migrant == 0, 0, ifelse(exante_old_legal == 0, 0, 1))) #for purposes of ex-post regression breakdown, this is most useful
#add person-level input labels
df_samesex <-df_samesex %>%
mutate(sex_sp = ifelse(sex_sp == 9, NA, sex_sp)) %>%
mutate(in_samesex = ifelse(sex_sp == sex, 1, 0)) %>% #watch techdef here/coding issues
mutate(in_oppositesex = ifelse((sex_sp != sex) & !is.na(sex_sp), 1, 0)) %>% #watch techdef here
mutate(post_2015 = ifelse(year >= 2015, 1, 0)) %>%
mutate(has_child = ifelse(nchild > 0, 1, 0)) #think: want to include if partner has child?
return(df_samesex)
#collapse for readability/organization above?
}
MA_working <- add_context(MA_working)
technical_cleaning <- function (data) {
gc()
data <- data %>%
mutate(expost_state = factor(expost_state)) %>%
mutate(exante_state = factor(exante_state)) %>%
filter(sex != 9) %>%
filter(age != 999) %>%
mutate(race = factor(race))
gc()
data <- data %>%
filter(educ != 99) %>%
mutate(educ = factor(educ)) %>%
filter(empstat != 9) %>%
mutate(empstat = factor(empstat)) %>%
mutate(occ = factor(occ)) %>%
mutate(ind = factor (ind)) %>%
filter(inctot != 9999998)
gc()
data <- data %>%
mutate(inctot = ifelse(inctot == 9999999, NA, inctot)) %>%
filter(migplac1 <= 57) %>%
mutate(migplac1 = factor(migplac1)) %>% #ensure migrants have state identified
filter(qsex != 4) %>% #get rid of those with imputed sex- watch partner's sex here too
filter(qrace != 3) %>% #get rid of missing race
mutate(offpov = factor(offpov)) %>%
mutate(sex_sp = ifelse(sex_sp == 9, NA, sex_sp)) %>% #relabel no have partner, watch placement in code
filter(!is.na(sex_sp)) %>% #to restrict to only those in relationships (argue more model cleaning than technical cleaning oops)
mutate(sex_sp = factor(sex_sp))
gc()
data <- data %>%
filter(bpl <= 57) #exclude people born outside of the US/in US territories
return(data)
}
MA_working <- technical_cleaning(MA_working)
MA_selected_data <- MA_working %>%
select(migrant, localtolocal_migrant, localtofed_migrant, fedtofed_migrant, fedtolocal_migrant, in_samesex, expost_old_legal, exante_old_legal, post_2015, sex, age, race, educ, occ, ind, bpl, has_child, inctot, perwt, year, expost_state, exante_state, tofed_migrant, fromfed_migrant, tolocal_migrant, fromlocal_migrant)
write_dta(MA_selected_data, "C:\\Users\\njrich\\Downloads\\MA_base_df.dta")
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
library(haven) #for reading in dta
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
install.packages("jtools") #for ggplot visualization
library(jtools)
install.packages("ggpubr")
library(ggpubr) #to arrange plots together
install.packages("ggpubr")
install.packages("jtools")
install.packages("kableExtra")
gc()
#windows
clean_df <- read_dta("C:\\Users\\njrich\\Downloads\\clean_dataframe.dta") %>%
clean_names() %>%
mutate(across(where(is.labelled), ~ as.character(as_factor(.)))) #hopefully this doesn't break things
# MA_df <- read_dta("C:\\Users\\njrich\\Downloads\\MA_base_df.dta") %>%
#   clean_names() %>%
#   mutate(across(where(is.labelled), ~ as.character(as_factor(.)))) #hopefully this doesn't break things
#mac
# clean_df <- read_dta("/Users/njrich/Downloads/clean_dataframe.dta") %>%
#   clean_names() %>%
#   mutate(across(where(is.labelled), ~ as.character(as_factor(.))))
#oop get rid of variables not using
gc()
colnames(clean_df)
knitr::opts_chunk$set(echo = TRUE)
test <- clean_df %>%
select(migrant, expost_state, expost_old_legal, exante_state, exante_old_legal) %>%
distinct()
View(test)
test <- clean_df %>%
select(migrant, exante_state, exante_old_legal, expost_state, expost_old_legal) %>%
filter(expost_state != exante_state) %>%
distinct()
View(test)
test <- clean_df %>%
select(year, migrant, exante_state, exante_old_legal, expost_state, expost_old_legal) %>%
filter(expost_state != exante_state) %>%
distinct()
View(test)
#check coding makes sense
test <- clean_df %>%
select(year, migrant, exante_state, exante_old_legal, expost_state, expost_old_legal) %>%
distinct() %>%
filter(expost_state != exante_state) %>%
filter(exante_state == 1)
#check coding makes sense
test <- clean_df %>%
select(year, migrant, exante_state, exante_old_legal, expost_state, expost_old_legal) %>%
distinct() %>%
filter(expost_state != exante_state) %>%
filter(exante_old_legal == 1)
View(test)
#check coding makes sense
test <- clean_df %>%
select(year, migrant, exante_state, exante_old_legal, expost_state, expost_old_legal) %>%
distinct() %>%
filter(expost_state != exante_state) %>%
filter(exante_old_legal == 1) %>%
distinct()
View(test)
test2 <- clean_df %>%
select(year, exante_state, exante_old_legal) %>%
filter(exante_old_legal == 1) %>%
distinct()
View(test2)
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
library(haven) #for reading in dta
install.packages("fastDummies")
library(fastDummies) #for region table
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
install.packages("jtools") #for ggplot visualization
library(jtools)
install.packages("ggpubr")
library(ggpubr) #to arrange plots together
gc()
#windows
# clean_df <- read_dta("C:\\Users\\njrich\\Downloads\\clean_dataframe.dta") %>%
#   clean_names() %>%
#   mutate(across(where(is.labelled), ~ as.character(as_factor(.)))) #hopefully this doesn't break things
# MA_df <- read_dta("C:\\Users\\njrich\\Downloads\\MA_base_df.dta") %>%
#   clean_names() %>%
#   mutate(across(where(is.labelled), ~ as.character(as_factor(.)))) #hopefully this doesn't break things
#mac
clean_df <- read_dta("/Users/njrich/Downloads/clean_dataframe.dta") %>%
clean_names() %>%
mutate(across(where(is.labelled), ~ as.character(as_factor(.))))
install.packages("jtools")
install.packages("ggpubr")
install.packages("kableExtra")
#oop get rid of variables not using
gc()
summary_stats <- as_survey(clean_df, weights = perwt) #note: exclude rep_wts so standard errors are inaccurate (file otherwise insanely big- talk someone about it)
install.packages("ggpubr")
install.packages("kableExtra")
#MA_summary_stats <- as_survey(MA_df, weights = perwt)
install.packages("kableExtra")
prop_newlegal_samesex <- summary_stats %>% #dropped prior year; see sample changes each year make it hard to do this although accurate to my regression
group_by(year, in_samesex) %>%
summarize(prop_in_newlegal = survey_mean((1-expost_old_legal), na.rm = T)) %>%
select(-prop_in_newlegal_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "samesex", "oppositesex")) %>%
pivot_wider(names_from = in_samesex, values_from = prop_in_newlegal) %>%
ungroup
View(prop_newlegal_samesex)

date_legalization == "OH" ~ "2015",
date_legalization == "OK" ~ "2014",
date_legalization == "OR" ~ "2014",
date_legalization == "PA" ~ "2014",
date_legalization == "RI" ~ "2013",
TRUE ~ date_legalization))
gc()
df_samesex <- df_samesex %>%
mutate(date_legalization = case_when(
date_legalization == "SC" ~ "2014",
date_legalization == "SD" ~ "2015",
date_legalization == "TN" ~ "2015",
date_legalization == "TX" ~ "2015",
date_legalization == "UT" ~ "2014",
date_legalization == "VT" ~ "2009",
date_legalization == "VA" ~ "2014",
date_legalization == "WA" ~ "2012",
date_legalization == "WV" ~ "2014",
date_legalization == "WI" ~ "2014",
date_legalization == "WY" ~ "2014",
date_legalization == "PR" ~ "2015",
date_legalization == "OMI" ~ "2015",
TRUE ~ date_legalization
))
gc()
df_samesex <- df_samesex %>%
mutate(date_legalization = as.numeric(date_legalization))
#make time_since variable
gc()
df_samesex <- df_samesex %>%
mutate(time_since_legalization = if_else(((YEAR - date_legalization) < 0), NA, (YEAR - date_legalization)))
#make time variable
gc()
df_samesex <- df_samesex %>%
mutate(time = YEAR - 2001) %>%
mutate(timesq = time ^2)
gc()
#read in data
#FRED <- read_excel("/Users/njrich/Desktop/Econ495/same-sex-migration/Data/FRED_statepops/STATEPOP.xls", sheet = "Annual") #for Mac
FRED <- read_excel("C:\\Users\\njrich\\Downloads\\STATEPOP.xls", sheet = "Annual") #for Windows
#match up columns
FRED <- FRED %>%
pivot_longer(AKPOP:WYPOP, names_to = "state_name") %>%
rename("state_pop" = "value") %>%
rename("YEAR" = "DATE")
#match up strings
FRED <- FRED %>%
mutate(state_name = str_remove(state_name, "POP")) %>%
mutate(YEAR = as.character(YEAR)) %>%
mutate(YEAR = str_remove(YEAR, "-01-01")) %>%
mutate(YEAR = as.numeric(YEAR)) %>%
mutate(state_pop = as.character(state_pop)) %>%
mutate(state_pop = str_remove(state_pop, "\\.")) %>%
mutate(state_pop = as.numeric(state_pop)) %>%
mutate(time = YEAR - 2001) %>%
mutate(timesq = time ^2)
gc()
df_samesex_mm <- df_samesex %>%
filter(in_samesex == 1) %>%
filter(AGE >= 30 & AGE <= 64) %>%
filter(YEAR >= 2001 & YEAR <= 2015) %>%
filter(MARST == 4 | MARST == 5 | MARST == 6) #includes those divorced, widowed, never married/single (NOTE: this excludes those married, separated, blank/missing)
#filter by sample
df_samesex_mm_gen <- df_samesex_mm #general sample
df_samesex_mm_m <- df_samesex_mm %>% #men only
filter(SEX.indv == 1)
df_samesex_mm_f <- df_samesex_mm %>% #women only
filter(SEX.indv == 2)
#next steps: adjust filters to exclude individuals mis-identified as partners by IPUMS
gc()
#make state_years string for repeated use
df_state_years <- df_samesex %>%
distinct(state_name, YEAR) %>%
mutate(state_year = paste(state_name, YEAR, sep = "_"))
state_years <- df_state_years$state_year %>% unique()
rm(df_state_years)
#outer function (watch opposite sex df differences)
create_output <- function(input_df) {
#make state_years (note: watch handling general state_years string for dfs with missing state_years)
df <- input_df %>%
mutate(state_year = paste(state_name, YEAR, sep = "_"))
#create export file paths
df_name_string <- deparse(substitute(input_df)) #convert df name to string for later file export
csv_filepath <- paste("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\F24_validation\\", gsub("df_samesex_", "", df_name_string), ".csv", sep = "")
stata_filepath <- paste("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\F24_validation\\", gsub("df_samesex_", "", df_name_string), ".dta", sep = "")
#inner function building export row by row- add if statement for stateyears not present
build_samesex_rows <- function(input_stateyear) {
small_df = df
state_year = input_stateyear
indv_state = substr(input_stateyear, 1, 2)
indv_year = substr(input_stateyear, 4, 8) %>%
as.numeric()
if((indv_state %in% small_df$state_name) & (indv_year %in% small_df$YEAR)) {
#count total potential migrants to state (all same-sex indv in given year excluding those in destination state)
tot_pot_mig_build <- small_df %>%
filter(YEAR == indv_year) %>%
filter(state_name != indv_state) %>%
summarize(count = sum(in_samesex_weighted))
tot_pot_mig <- tot_pot_mig_build$count[1]
#count actual migrants to state
mig_to_state_build <- small_df %>%
filter(YEAR == indv_year) %>%
filter(state_name == indv_state) %>%
filter(MIGPLAC1 > 0 & MIGPLAC1 < 57) %>%
summarize(count = sum(in_samesex_weighted))
mig_to_state = mig_to_state_build$count[1]
#make fraction
rate = mig_to_state/tot_pot_mig
}
#for missing state-years
else{
rate = NA
}
#build row to stack later (and fraction) - watch NAs/comparison check
df_row = data.frame(YEAR = indv_year,
state_name = indv_state,
staterate_year = rate)
return(df_row)
}
partial_output <- map(state_years, build_samesex_rows) %>% list_rbind()
#drop NAs (temporarily keep NAs for RCompare)
# partial_output <- partial_output %>%
#   filter(!is.na(staterate_year))
#ID key variables to merge back in
extra_variables <- df_samesex %>%
distinct(YEAR, state_name, time_since_legalization)
#merge back in
output <-partial_output %>%
left_join(extra_variables, join_by(YEAR, state_name)) %>%
left_join(FRED, join_by(YEAR, state_name))
#make dummy variables for 1-2, 3-4, 5-6, >7 years
output <- output %>%
mutate(time_leg_chunked = case_when(
time_since_legalization == 1 ~ 2,
time_since_legalization == 2 ~ 2,
time_since_legalization == 3 ~ 4,
time_since_legalization == 4 ~ 4,
time_since_legalization == 5 ~ 6,
time_since_legalization == 6 ~ 6,
time_since_legalization >= 7 ~ 7,
))
#Export
write.csv(output, csv_filepath)
write_dta(output, stata_filepath)
return(output)
}
#test differences with original method
F24_mm_m <- create_output(df_samesex_mm_m)
F24_mm_f <- create_output(df_samesex_mm_f)
F24_mm_gen <- create_output(df_samesex_mm_gen)
W24_mm_m <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_m.csv")
W24_mm_f <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_f.csv")
W24_mm_gen <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_gen.csv")
compared_mm_m <- rCompare(F24_mm_m, W24_mm_m)
compared_mm_f <- rCompare(F24_mm_f, W24_mm_f)
compared_mm_gen <- rCompare(F24_mm_gen, W24_mm_gen)
View(F24_mm_f)
View(W24_mm_f)
?read_csv
?read.csv
W24_mm_m <- read.csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_m.csv", row.names = F)
W24_mm_m <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_m.csv") %>%
select(YEAR:time_leg_chunked)
W24_mm_f <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_f.csv") %>%
select(YEAR:time_leg_chunked)
W24_mm_gen <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_gen.csv") %>%
select(YEAR:time_leg_chunked)
compared_mm_m <- rCompare(F24_mm_m, W24_mm_m)
compared_mm_f <- rCompare(F24_mm_f, W24_mm_f)
compared_mm_gen <- rCompare(F24_mm_gen, W24_mm_gen)
View(F24_mm_f)
mod_F24_mm_gen <- F24_mm_m %>%
filer(!is.na(staterate_year))
mod_F24_mm_gen <- F24_mm_m %>%
filter(!is.na(staterate_year))
mod_F24_mm_gen <- F24_mm_m %>%
filter(!is.na(staterate_year))
mod_F24_mm_gen <- F24_mm_gen %>%
filter(!is.na(staterate_year))
mod_F24_mm_m <- F24_mm_m %>%
filter(!is.na(staterate_year))
mod_F24_mm_f <- F24_mm_f %>%
filter(!is.na(staterate_year))
mod_F24_mm_gen <- F24_mm_gen %>%
filter(!is.na(staterate_year))
View(mod_F24_mm_f)
View(W24_mm_f)
W24_mm_f$staterate_year[1]
W24_mm_f %>% filter(state_name == "DC" & YEAR == 2001) %>% select(staterate_year)
F24_mm_f %>% filter(state_name == "DC" & YEAR == 2001) %>% select(staterate_year)
View(F24_mm_gen)
?rCompare
compared_mm_f <- rCompare(mod_F24_mm_f, W24_mm_f, keys = c("YEAR", "state_name"), roundDigits = 6)
View(compared_mm_f)
View(compared_mm_f[["mismatches"]][["STATERATE_YEAR"]])
mod_F24_mm_m <- F24_mm_m %>%
filter(!is.na(staterate_year)) %>%
mutate(stateyear = paste(YEAR, state_name))
mod_F24_mm_f <- F24_mm_f %>%
filter(!is.na(staterate_year)) %>%
mutate(stateyear = paste(YEAR, state_name))
mod_F24_mm_gen <- F24_mm_gen %>%
filter(!is.na(staterate_year)) %>%
mutate(stateyear = paste(YEAR, state_name))
W24_mm_m <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_m.csv") %>%
select(YEAR:time_leg_chunked) %>%
mutate(stateyear = paste(YEAR, state_name))
W24_mm_f <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_f.csv") %>%
select(YEAR:time_leg_chunked) %>%
mutate(stateyear = paste(YEAR, state_name))
W24_mm_gen <- read_csv("C:\\Users\\njrich\\Desktop\\same-sex-migration\\W24_builds\\mm_gen.csv") %>%
select(YEAR:time_leg_chunked) %>%
mutate(stateyear = paste(YEAR, state_name))
mm_f_comp <- mod_F24_mm_f$stateyear %in% mod_F24_mm_f$stateyear
mm_f_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(stateyear %in% mod_F24_mm_f$stateyear)
View(mm_f_comp)
mm_f_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(stateyear %in% W24_mm_f$stateyear)
mm_f_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(!(stateyear %in% W24_mm_f$stateyear))
View(mm_f_comp)
mm_f_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(!(stateyear %in% W24_mm_f$stateyear))
mm_f_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(!(stateyear %in% W24_mm_f$stateyear))
mm_gen_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(!(stateyear %in% W24_mm_gen$stateyear))
mm_m_comp <- mod_F24_mm_f %>% select(stateyear) %>% filter(!(stateyear %in% W24_mm_m$stateyear))
View(compared_mm_gen)
compared_mm_m <- rCompare(mod_F24_mm_m, W24_mm_m, keys = c("YEAR", "state_name"), roundDigits = 6)
compared_mm_f <- rCompare(mod_F24_mm_f, W24_mm_f, keys = c("YEAR", "state_name"), roundDigits = 6)
compared_mm_gen <- rCompare(mod_F24_mm_gen, W24_mm_gen, keys = c("YEAR", "state_name"), roundDigits = 6)
View(compared_mm_gen)
View(compared_mm_gen[["mismatches"]][["STATERATE_YEAR"]])
View(df_samesex_mm_m)
View(compared_mm_m)
View(compared_mm_m[["mismatches"]][["STATERATE_YEAR"]])
View(mod_F24_mm_f)
View(mm_f_comp)
gc()
df <- df_samesex_mm_f
#make year totals excluding each state (no migrant restrictions)
df_yeartotals <- df
state_names <- unique(df$state_name)
indv_names <- paste(state_names, "excluded_indv", sep = "_")
for(i in 1:length(state_names)) {
df_yeartotals <- df_yeartotals %>%
mutate(column = if_else(state_name != state_names[i], in_samesex_weighted, 0)) %>%
rename(!!indv_names[i] := column)
}
gc()
total_names <- paste(state_names, "excluded_total", sep = "_")
for(i in 1:length(state_names)) {
col_name <- indv_names[i]
df_yeartotals <- df_yeartotals %>%
group_by(YEAR) %>%
mutate(columned = sum(!!sym(col_name), na.rm = T)) %>%
ungroup() %>%
rename(!!total_names[i] := columned)
}
df_yeartotals <- df_yeartotals %>%
select(YEAR, state_name, AL_excluded_total:WY_excluded_total)
#make state year totals
df_statetotals <- df %>%
filter(MIGPLAC1 > 0 & MIGPLAC1 < 57) %>%
group_by(YEAR, state_name) %>%
summarize(state_total = sum(in_samesex_weighted, na.rm = T)) %>%
ungroup()
#some states don't exist here so convert later to 0
#set up division
merged_totals <- df_statetotals %>%
left_join(df_yeartotals, join_by(YEAR, state_name), multiple = "any") #get rid of duplicates
samesex_staterate <- merged_totals %>%
pivot_wider(names_from = state_name, values_from = state_total) %>%
mutate_all(~replace(., is.na(.), 0)) #coerce missing values to 0
#do the division
for(i in 1:length(state_names)) {
state = state_names[i]
total = total_names[i]
samesex_staterate <- samesex_staterate %>%
mutate(!!state := !!sym(state)/!!sym(total))
}
samesex_staterate <- samesex_staterate %>%
select(YEAR, AK:WY) %>%
pivot_longer(AK:WY, names_to = "state_name") %>%
rename(staterate_year = value) %>%
mutate(staterate_year = staterate_year * 100)
rm(df, merged_totals, df_statetotals, df_yeartotals, col_name, i, indv_names, state, state_names, total, total_names)
gc()
#ID key variables to merge back in
extra_variables <- df_samesex %>%
distinct(YEAR, state_name, time_since_legalization)
#merge back in
output <-samesex_staterate %>%
left_join(extra_variables, join_by(YEAR, state_name)) %>%
left_join(FRED, join_by(YEAR, state_name))
#make dummy variables for 1-2, 3-4, 5-6, >7 years
output <- output %>%
mutate(time_leg_chunked = case_when(
time_since_legalization == 1 ~ 2,
time_since_legalization == 2 ~ 2,
time_since_legalization == 3 ~ 4,
time_since_legalization == 4 ~ 4,
time_since_legalization == 5 ~ 6,
time_since_legalization == 6 ~ 6,
time_since_legalization >= 7 ~ 7,
))
rm(samesex_staterate, extra_variables)
View(output)
View(df_samesex_mm_f)
gc()
df <- df_samesex_mm_f
#make year totals excluding each state (no migrant restrictions)
df_yeartotals <- df
state_names <- unique(df$state_name)
indv_names <- paste(state_names, "excluded_indv", sep = "_")
for(i in 1:length(state_names)) {
df_yeartotals <- df_yeartotals %>%
mutate(column = if_else(state_name != state_names[i], in_samesex_weighted, 0)) %>%
rename(!!indv_names[i] := column)
}
gc()
total_names <- paste(state_names, "excluded_total", sep = "_")
for(i in 1:length(state_names)) {
col_name <- indv_names[i]
df_yeartotals <- df_yeartotals %>%
group_by(YEAR) %>%
mutate(columned = sum(!!sym(col_name), na.rm = T)) %>%
ungroup() %>%
rename(!!total_names[i] := columned)
}
df_yeartotals <- df_yeartotals %>%
select(YEAR, state_name, AL_excluded_total:WY_excluded_total)
#make state year totals
df_statetotals <- df %>%
filter(MIGPLAC1 > 0 & MIGPLAC1 < 57) %>%
group_by(YEAR, state_name) %>%
summarize(state_total = sum(in_samesex_weighted, na.rm = T)) %>%
ungroup()
#some states don't exist here so convert later to 0
#set up division
merged_totals <- df_statetotals %>%
left_join(df_yeartotals, join_by(YEAR, state_name), multiple = "any") #get rid of duplicates
samesex_staterate <- merged_totals %>%
pivot_wider(names_from = state_name, values_from = state_total) %>%
mutate_all(~replace(., is.na(.), 0)) #coerce missing values to 0
#do the division
for(i in 1:length(state_names)) {
state = state_names[i]
total = total_names[i]
samesex_staterate <- samesex_staterate %>%
mutate(!!state := !!sym(state)/!!sym(total))
}
samesex_staterate <- samesex_staterate %>%
select(YEAR, AK:WY) %>%
pivot_longer(AK:WY, names_to = "state_name") %>%
rename(staterate_year = value) %>%
mutate(staterate_year = staterate_year * 100)
gc()
#ID key variables to merge back in
extra_variables <- df_samesex %>%
distinct(YEAR, state_name, time_since_legalization)
#merge back in
output <-samesex_staterate %>%
left_join(extra_variables, join_by(YEAR, state_name)) %>%
left_join(FRED, join_by(YEAR, state_name))
#make dummy variables for 1-2, 3-4, 5-6, >7 years
output <- output %>%
mutate(time_leg_chunked = case_when(
time_since_legalization == 1 ~ 2,
time_since_legalization == 2 ~ 2,
time_since_legalization == 3 ~ 4,
time_since_legalization == 4 ~ 4,
time_since_legalization == 5 ~ 6,
time_since_legalization == 6 ~ 6,
time_since_legalization >= 7 ~ 7,
))
view(state_names)
view(total_names)
View(df_yeartotals)
View(df_statetotals)
View(samesex_staterate)
?left_join
View(merged_totals)
samesex_staterate <- merged_totals %>%
pivot_wider(names_from = state_name, values_from = state_total) %>%
mutate_all(~replace(., is.na(.), 0)) #coerce missing values to 0
View(samesex_staterate)
gc()
df <- df_samesex_mm_f
#make year totals excluding each state (no migrant restrictions)
df_yeartotals <- df
state_names <- unique(df$state_name)
indv_names <- paste(state_names, "excluded_indv", sep = "_")
for(i in 1:length(state_names)) {
df_yeartotals <- df_yeartotals %>%
mutate(column = if_else(state_name != state_names[i], in_samesex_weighted, 0)) %>%
rename(!!indv_names[i] := column)
}
gc()
total_names <- paste(state_names, "excluded_total", sep = "_")
for(i in 1:length(state_names)) {
col_name <- indv_names[i]
df_yeartotals <- df_yeartotals %>%
group_by(YEAR) %>%
mutate(columned = sum(!!sym(col_name), na.rm = T)) %>%
ungroup() %>%
rename(!!total_names[i] := columned)
}
df_yeartotals <- df_yeartotals %>%
select(YEAR, state_name, AL_excluded_total:WY_excluded_total)
#make state year totals
df_statetotals <- df %>%
filter(MIGPLAC1 > 0 & MIGPLAC1 < 57) %>%
group_by(YEAR, state_name) %>%
summarize(state_total = sum(in_samesex_weighted, na.rm = T)) %>%
ungroup()
#some states don't exist here so convert later to 0
#set up division
merged_totals <- df_statetotals %>%
left_join(df_yeartotals, join_by(YEAR, state_name), multiple = "any") #get rid of duplicates
samesex_staterate <- merged_totals %>%
pivot_wider(names_from = state_name, values_from = state_total) %>%
mutate_all(~replace(., is.na(.), 0)) #coerce missing values to 0
View(samesex_staterate)
merged_totals <- df_statetotals %>%
left_join(df_yeartotals, join_by(YEAR, state_name), multiple = "any") #get rid of duplicates
View(merged_totals)
view(samesex_staterate %>% select(MT))
for(i in 1:length(state_names)) {
state = state_names[i]
total = total_names[i]
samesex_staterate <- samesex_staterate %>%
mutate(!!state := !!sym(state)/!!sym(total))
}
View(samesex_staterate)
knitr::opts_chunk$set(echo = TRUE)
gc()
install.packages("dataCompareR")
library(dataCompareR) #for rCompare
library(data.table) #for data loading
library(haven) #for writing to dta
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
library(srvyr) #for weighting
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv")
#windows
?function
knitr::opts_chunk$set(echo = TRUE)
gc()
install.packages("dataCompareR")
library(dataCompareR) #for rCompare
library(data.table) #for data loading
library(haven) #for writing to dta
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
library(srvyr) #for weighting
install.packages("dataCompareR")
knitr::opts_chunk$set(echo = TRUE)
gc()
install.packages("dataCompareR")
#library(dataCompareR) #for rCompare
library(data.table) #for data loading
library(haven) #for writing to dta
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
library(srvyr) #for weighting
install.packages("dataCompareR")
?srvyr
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv") %>% #didn't break
clean_names()
?fread
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
library(srvyr) #for weighting
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("janitor")
install.packages("srvyr")
library(srvyr) #for weighting
knitr::opts_chunk$set(echo = TRUE)
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv") %>%
clean_names()
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv") %>%
clean_names()
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv") %>%
clean_names()

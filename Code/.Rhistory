date_legalization == "NJ" ~ "2013",
date_legalization == "NM" ~ "2013",
date_legalization == "NY" ~ "2011",
date_legalization == "NC" ~ "2014",
date_legalization == "ND" ~ "2015",
date_legalization == "OH" ~ "2015",
date_legalization == "OK" ~ "2014",
date_legalization == "OR" ~ "2014",
date_legalization == "PA" ~ "2014",
date_legalization == "RI" ~ "2013",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "SC" ~ "2014",
date_legalization == "SD" ~ "2015",
date_legalization == "TN" ~ "2015",
date_legalization == "TX" ~ "2015",
date_legalization == "UT" ~ "2014",
date_legalization == "VT" ~ "2009",
date_legalization == "VA" ~ "2014",
date_legalization == "WA" ~ "2012",
date_legalization == "WV" ~ "2014",
date_legalization == "WI" ~ "2014",
date_legalization == "WY" ~ "2014",
date_legalization == "PR" ~ "2015",
date_legalization == "OMI" ~ "2015",
TRUE ~ date_legalization
))
gc()
df <- df %>%
mutate(date_legalization = as.numeric(date_legalization))
#maybe move what is below
gc()
df <- df %>%
mutate(legal_state = ifelse(year >= date_legalization, 1, 0)) %>% #watch greater than/greater than or equal to
mutate(old_legal = ifelse(year < 2015, legal_state, if_else(date_legalization == 2015, 0, 1)))  %>% #track states as of 2014 not legal still even if become legal later- note dynamic before 2014 as states become legal, CHECK LOGIC
if(deparse(substitute(variable)) == "statefip") {
print("yay")
df <- df %>%
rename(expost_state = state, expost_date_legalization = date_legalization, expost_legal_state = legal_state, expost_old_legal = old_legal)
}  else {
print("woop")
df <- df %>%
rename(exante_state = state, exante_date_legalization = date_legalization, exante_legal_state = legal_state, exante_old_legal = old_legal)
}
return(df)
}
test <- add_state_labels(stata_analysis, statefip, "expost")
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("fastDummies")
library(fastDummies) #for dummies- maybe
install.packages("fixest")
library(fixest) #for regression - maybe
library(haven) #for stata data export/import
install.packages("stargazer")
library(stargazer) #for latex output
library(broom) #convert fixest outputs to data frames
gc()
#mac
F24_pull1 <- fread("/Users/njrich/Downloads/F24_pull1.csv") %>%
clean_names()
#windows
# F24_pull1 <- fread("C:\\Users\\njrich\\Downloads\\F24_pull1.csv") %>%
#   clean_names()
#download cleaned-ish data
#mac
# cleanish <- read_dta("/Users/njrich/Downloads/F24_stata_analysis.dta")
#windows
gc()
# summary_stats <- as_survey(F24_pull1, weights = perwt) #note: exclude rep_wts so standard errors are inaccurate (file otherwise insanely big- talk someone about it)
stata_analysis <- F24_pull1
#rm(F24_pull1)
add_state_labels <- function(df, variable, label) {
#readjustments for function handling
#TESTING
print(paste(label, "woo"))
print(deparse(substitute(variable)))
###
df <- df %>%
rename(variable = {{ variable }})
df <- df %>%
mutate(state = as.character(variable))
df <- df %>%
mutate(state = case_when(
state == "1" ~ "AL",
state == "2" ~ "AK",
state == "4" ~ "AZ",
state == "5" ~ "AR",
state == "6" ~ "CA",
state == "8" ~ "CO",
state == "9" ~ "CT",
state == "10" ~ "DE",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "11" ~ "DC",
state == "12" ~ "FL",
state == "13" ~ "GA",
state == "15" ~ "HI",
state == "16" ~ "ID",
state == "17" ~ "IL",
state == "18" ~ "IN",
state == "19" ~ "IA",
state == "20" ~ "KS",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "21" ~ "KY",
state == "22" ~ "LA",
state == "23" ~ "MI",
state == "24" ~ "MD",
state == "25" ~ "MA",
state == "26" ~ "ME",
state == "27" ~ "MN",
state == "28" ~ "MS",
state == "29" ~ "MO",
state == "30" ~ "MT",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "31" ~ "NE",
state == "32" ~ "NV",
state == "33" ~ "NH",
state == "34" ~ "NJ",
state == "35" ~ "NM",
state == "36" ~ "NY",
state == "37" ~ "NC",
state == "38" ~ "ND",
state == "39" ~ "OH",
state == "40" ~ "OK",
TRUE ~ state))
gc()
df <- df %>%
mutate(state = case_when(
state == "41" ~ "OR",
state == "42" ~ "PA",
state == "44" ~ "RI",
state == "45" ~ "SC",
state == "46" ~ "SD",
state == "47" ~ "TN",
state == "48" ~ "TX",
state == "49" ~ "UT",
state == "50" ~ "VT",
state == "51" ~ "VA",
state == "53" ~ "WA",
state == "54" ~ "WV",
state == "55" ~ "WI",
state == "56" ~ "WY",
state == "72" ~ "PR",
state == "97" ~ "OMI", #Overseas Military Installations
state == "99" ~ NA,
TRUE ~ state
))
#label legalization date from Gerstmann "2012" pqper
gc()
df <- df %>%
mutate(date_legalization = state)
df <- df %>%
mutate(date_legalization = case_when (
date_legalization == "AL" ~ "2015",
date_legalization == "AK" ~ "2014",
date_legalization == "AZ" ~ "2014",
date_legalization == "AR" ~ "2015",
date_legalization == "CA" ~ "2013", #watch legalized/repealed timeline
date_legalization == "CO" ~ "2014",
date_legalization == "CT" ~ "2008",
date_legalization == "DE" ~ "2013",
date_legalization == "DC" ~ "2009",
date_legalization == "FL" ~ "2015",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "GA" ~ "2015",
date_legalization == "HI" ~ "2013",
date_legalization == "ID" ~ "2014",
date_legalization == "IL" ~ "2013",
date_legalization == "IN" ~ "2014",
date_legalization == "IA" ~ "2009",
date_legalization == "KS" ~ "2014",
date_legalization == "KY" ~ "2015",
date_legalization == "LA" ~ "2015",
date_legalization == "ME" ~ "2012",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "MD" ~ "2012",
date_legalization == "MA" ~ "2003",
date_legalization == "MI" ~ "2015",
date_legalization == "MN" ~ "2013",
date_legalization == "MS" ~ "2015",
date_legalization == "MO" ~ "2015",
date_legalization == "MT" ~ "2014",
date_legalization == "NE" ~ "2015",
date_legalization == "NV" ~ "2014",
date_legalization == "NH" ~ "2009",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "NJ" ~ "2013",
date_legalization == "NM" ~ "2013",
date_legalization == "NY" ~ "2011",
date_legalization == "NC" ~ "2014",
date_legalization == "ND" ~ "2015",
date_legalization == "OH" ~ "2015",
date_legalization == "OK" ~ "2014",
date_legalization == "OR" ~ "2014",
date_legalization == "PA" ~ "2014",
date_legalization == "RI" ~ "2013",
TRUE ~ date_legalization))
gc()
df <- df %>%
mutate(date_legalization = case_when(
date_legalization == "SC" ~ "2014",
date_legalization == "SD" ~ "2015",
date_legalization == "TN" ~ "2015",
date_legalization == "TX" ~ "2015",
date_legalization == "UT" ~ "2014",
date_legalization == "VT" ~ "2009",
date_legalization == "VA" ~ "2014",
date_legalization == "WA" ~ "2012",
date_legalization == "WV" ~ "2014",
date_legalization == "WI" ~ "2014",
date_legalization == "WY" ~ "2014",
date_legalization == "PR" ~ "2015",
date_legalization == "OMI" ~ "2015",
TRUE ~ date_legalization
))
gc()
df <- df %>%
mutate(date_legalization = as.numeric(date_legalization))
#maybe move what is below
gc()
df <- df %>%
mutate(legal_state = ifelse(year >= date_legalization, 1, 0)) %>% #watch greater than/greater than or equal to
mutate(old_legal = ifelse(year < 2015, legal_state, if_else(date_legalization == 2015, 0, 1)))  %>% #track states as of 2014 not legal still even if become legal later- note dynamic before 2014 as states become legal, CHECK LOGIC
#NOTE: THIS IS BROKEN DUE TO LIKELY MEMORY ISSUES; BREAK INTO DIFFERENT FUNCTION/KEEP BRAINSTORMING
if(deparse(substitute(variable)) == "statefip") {
print("yay")
df <- df %>%
rename(expost_state = state, expost_date_legalization = date_legalization, expost_legal_state = legal_state, expost_old_legal = old_legal)
}  else {
print("woop")
df <- df %>%
rename(exante_state = state, exante_date_legalization = date_legalization, exante_legal_state = legal_state, exante_old_legal = old_legal)
}
return(df)
}
#TEST
test <- add_state_labels(stata_analysis, statefip, "expost")
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("fastDummies")
library(fastDummies) #for dummies- maybe
install.packages("fixest")
library(fixest) #for regression - maybe
library(haven) #for stata data export/import
install.packages("stargazer")
library(stargazer) #for regression latex output
library(broom) #convert fixest outputs to data frames
install.library("xtable") #for export dataframes as (la)tex files
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(readxl) #for reading in FRED data
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("fastDummies")
library(fastDummies) #for dummies- maybe
install.packages("fixest")
library(fixest) #for regression - maybe
library(haven) #for stata data export/import
install.packages("stargazer")
library(stargazer) #for regression latex output
library(broom) #convert fixest outputs to data frames
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
gc()
#windows
# clean_df <- read_dta("C:\\Users\\njrich\\Downloads\\clean_dataframe.dta") %>%
#   clean_names()
#mac
clean_df <- read_dta("/Users/njrich/Downloads/clean_dataframe.dta") %>%
clean_names()
install.packages("kableExtra")
gc()
summary_stats <- as_survey(clean_df, weights = perwt) #note: exclude rep_wts so standard errors are inaccurate (file otherwise insanely big- talk someone about it)
gc()
#count those in/not in same sex
count_same_sex <- summary_stats %>%
group_by(year) %>%
summarize(prop_samesex = survey_mean(in_samesex, na.rm = T)) %>%
select(-prop_samesex_se)
#need to recreate variables for this
gc()
#count prop in legal same-sex state/not:
# count_in_legal <- summary_stats %>%
#   group_by(year) %>%
#   summarize(prop_in_legal = survey_mean(expost_legal_state, na.rm = T)) %>%
#   select(-prop_in_legal_se)
###
gc()
#count male/female - think about if need this
count_male_female <- summary_stats %>%
mutate(sex = ifelse(sex == 9, NA, sex - 1)) %>%
group_by(year) %>%
summarize(prop_fem = survey_mean(sex, na.rm = T)) %>%
select(-prop_fem_se)
gc()
#count those in/not in same sex
count_same_sex <- summary_stats %>%
group_by(year) %>%
summarize(prop_samesex = survey_mean(in_samesex, na.rm = T)) %>%
select(-prop_samesex_se)
#need to recreate variables for this
gc()
#count prop in legal same-sex state/not:
# count_in_legal <- summary_stats %>%
#   group_by(year) %>%
#   summarize(prop_in_legal = survey_mean(expost_legal_state, na.rm = T)) %>%
#   select(-prop_in_legal_se)
###
gc()
#count male/female - think about if need this
count_male_female <- summary_stats %>%
mutate(sex = ifelse(sex == 9, NA, sex - 1)) %>%
group_by(year) %>%
summarize(prop_fem = survey_mean(sex, na.rm = T)) %>%
select(-prop_fem_se)
gc()
#count male/female among those in same-sex relationships
prop_fem_samesex <- summary_stats %>%
filter(in_samesex == 1) %>%
mutate(sex = ifelse(sex == 9, NA, sex - 1)) %>%
group_by(year, in_samesex) %>%
summarize(prop_fem = survey_mean(sex, na.rm = T)) %>%
select(-prop_fem_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = prop_fem)
gc()
#fraction with children table
#need to import variables for this
gc()
#mean age by same-sex/opposite-sex weighted, by year
mean_age_samesex <- summary_stats %>%
group_by(year, in_samesex) %>%
summarize(mean_age = survey_mean(age, na.rm = T)) %>%
select(-mean_age_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = mean_age)
gc()
#fraction >=4 years college attainment by same-sex/opposite-sex weighted, by year
frac_college_samesex <- summary_stats %>%
mutate(four_years_college = ifelse(educ >= 10, 1, 0)) %>%
group_by(year, in_samesex) %>%
summarize(frac_college = survey_mean(four_years_college, na.rm = T)) %>%
select(-frac_college_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = frac_college)
gc()
#fraction white by same-sex/opposite-sex weighted, by year
frac_white_samesex <- summary_stats %>%
mutate(white = ifelse(race == 1, 1, 0)) %>%
group_by(year, in_samesex) %>%
summarize(frac_white = survey_mean(white, na.rm = T)) %>%
select(-frac_white_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = frac_white)
gc()
#mean income by same-sex/opposite-sex weighted, by year
mean_income_samesex <- summary_stats %>%
group_by(year, in_samesex) %>%
summarize(mean_income = survey_mean(inctot, na.rm = T)) %>%
select(-mean_income_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = mean_income)
gc()
#create joint table
joint_control_table <- prop_fem_samesex %>%
left_join(mean_age_samesex, by = "year") %>%
left_join(frac_college_samesex, by = "year") %>%
left_join(frac_white_samesex, by = "year") %>%
left_join(mean_income_samesex, by = "year") %>%
kable(caption = "Summary Statistics for Proposed Controls", format = "latex", booktabs = T, digits = 3) %>%
add_header_above(c(" " = 1, "Fraction Female" = 2, "Mean Age" = 2, "Fraction At Least 4 Years College" = 2, "Fraction White" = 2, "Mean Income" = 2))
#export joint table
writeLines(joint_control_table, "/Users/njrich/Desktop/same-sex-migration/outputs/summary_stats/control_table.tex") #NOTE: THIS IS FOR MAC, WILL NEED TO ADJUST FOR WINDOWS
knitr::opts_chunk$set(echo = TRUE)
gc()
library(data.table) #for data loading
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
install.packages("kableExtra")
?colnames
gc()
library(data.table) #for data loading
library(tidyverse) #for data work
install.packages("janitor")
library(janitor) #for clean_names
install.packages("srvyr")
library(srvyr) #for weighting
install.packages("kableExtra") #to make more complicated output tables for LATEX
library(kableExtra)
install.packages("srvyr")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("janitor")
gc()
#windows
# clean_df <- read_dta("C:\\Users\\njrich\\Downloads\\clean_dataframe.dta") %>%
#   clean_names()
#mac
clean_df <- read_dta("/Users/njrich/Downloads/clean_dataframe.dta") %>%
clean_names()
library(haven) #for reading in dta
gc()
#windows
# clean_df <- read_dta("C:\\Users\\njrich\\Downloads\\clean_dataframe.dta") %>%
#   clean_names()
#mac
clean_df <- read_dta("/Users/njrich/Downloads/clean_dataframe.dta") %>%
clean_names()
gc()
summary_stats <- as_survey(clean_df, weights = perwt) #note: exclude rep_wts so standard errors are inaccurate (file otherwise insanely big- talk someone about it)
gc()
#count male/female among those in same-sex relationships
prop_fem_samesex <- summary_stats %>%
filter(in_samesex == 1) %>%
mutate(sex = ifelse(sex == 9, NA, sex - 1)) %>%
group_by(year, in_samesex) %>%
summarize(prop_fem = survey_mean(sex, na.rm = T)) %>%
select(-prop_fem_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = prop_fem)
gc()
#fraction with children table
#need to import variables for this
gc()
#mean age by same-sex/opposite-sex weighted, by year
mean_age_samesex <- summary_stats %>%
group_by(year, in_samesex) %>%
summarize(mean_age = survey_mean(age, na.rm = T)) %>%
select(-mean_age_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = mean_age)
gc()
#fraction >=4 years college attainment by same-sex/opposite-sex weighted, by year
frac_college_samesex <- summary_stats %>%
mutate(four_years_college = ifelse(educ >= 10, 1, 0)) %>%
group_by(year, in_samesex) %>%
summarize(frac_college = survey_mean(four_years_college, na.rm = T)) %>%
select(-frac_college_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = frac_college)
gc()
#fraction white by same-sex/opposite-sex weighted, by year
frac_white_samesex <- summary_stats %>%
mutate(white = ifelse(race == 1, 1, 0)) %>%
group_by(year, in_samesex) %>%
summarize(frac_white = survey_mean(white, na.rm = T)) %>%
select(-frac_white_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = frac_white)
gc()
#mean income by same-sex/opposite-sex weighted, by year
mean_income_samesex <- summary_stats %>%
group_by(year, in_samesex) %>%
summarize(mean_income = survey_mean(inctot, na.rm = T)) %>%
select(-mean_income_se) %>%
mutate(in_samesex = ifelse(in_samesex == 1, "Same-Sex", "Opposite-Sex")) %>%
pivot_wider(names_from = in_samesex, values_from = mean_income)
gc()
#create joint table
joint_control_table <- prop_fem_samesex %>%
left_join(mean_age_samesex, by = "year") %>%
left_join(frac_college_samesex, by = "year") %>%
left_join(frac_white_samesex, by = "year") %>%
left_join(mean_income_samesex, by = "year") %>%
colnames(Year, Same-Sex, Opposite-Sex, Same-Sex, Opposite-Sex, Same-Sex, Opposite-Sex, Same-Sex, Opposite-Sex, Same-Sex, Opposite-Sex) %>%
kable(caption = "Summary Statistics for Proposed Controls", format = "latex", booktabs = T, digits = 3) %>%
add_header_above(c(" " = 1, "Fraction Female" = 2, "Mean Age" = 2, "Fraction At Least 4 Years College" = 2, "Fraction White" = 2, "Mean Income" = 2))
